{"version":3,"sources":["TodoContainer.js","redux/todo/todoActions.js","redux/todo/todoTypes.js","redux/visibilityFilter/filterActions.js","redux/visibilityFilter/filterTypes.js","redux/todo/todoReducer.js","redux/rootReducer.js","redux/visibilityFilter/filterReducer.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","todos","onTodoClick","className","map","completed","id","text","key","onClick","TodoContainer","useSelector","state","visibilityFilter","dispatch","useDispatch","getVisibleTodos","type","toggleTodo","onAddClick","todo","uuid","v4","addTodo","onFilterClick","filter","setVisibilityFilter","AddTodo","input","onSubmit","e","preventDefault","value","autoFocus","ref","node","FilterLink","currentFilter","children","style","opacity","Footer","t","initialState","todoReducer","action","rootReducer","combineReducers","store","createStore","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c551a78f.chunk.js","sourcesContent":["import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { addTodo, toggleTodo, setVisibilityFilter } from \"./redux\";\n\nfunction TodoContainer() {\n  const todos = useSelector(state => state.todos);\n  const visibilityFilter = useSelector(state => state.visibilityFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"todo-app\">\n      <h1 className=\"todo-title\">Todos</h1>\n      <TodoList\n        todos={getVisibleTodos(todos, visibilityFilter)}\n        onTodoClick={id => dispatch(toggleTodo(id))}\n      />\n      <AddTodo onAddClick={text => dispatch(addTodo(text))} />\n      <Footer\n        visibilityFilter={visibilityFilter}\n        onFilterClick={filter => dispatch(setVisibilityFilter(filter))}\n      />\n    </div>\n  );\n}\n\nconst TodoList = ({ todos, onTodoClick }) => {\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(({ completed, id, text }) => (\n        <li\n          key={id}\n          className={completed ? \"todo todo--completed\" : \"todo\"}\n          onClick={() => onTodoClick(id)}\n        >\n          <span className=\"todo__content\">{text}</span>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default TodoContainer;\n\nconst AddTodo = ({ onAddClick }) => {\n  let input;\n  return (\n    <div className=\"add-todo\">\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          input.value && onAddClick(input.value);\n          input.value = \"\";\n        }}\n      >\n        <input\n          autoFocus\n          className=\"add-todo__input\"\n          ref={node => {\n            input = node;\n          }}\n        />\n        <button\n          className=\"add-todo__btn\"\n          onClick={() => {\n            input.value && onAddClick(input.value);\n            input.value = \"\";\n          }}\n        >\n          <i className=\"fa fa-plus\"></i>\n        </button>\n      </form>\n    </div>\n  );\n};\n\nconst FilterLink = ({ filter, currentFilter, children, onClick }) => {\n  return (\n    <button\n      className=\"filter__link\"\n      onClick={e => {\n        e.preventDefault();\n        onClick(filter);\n      }}\n      style={{ opacity: currentFilter === filter ? 0.2 : 1 }}\n    >\n      {children}\n    </button>\n  );\n};\n\nconst Footer = ({ visibilityFilter, onFilterClick }) => (\n  <div className=\"filters\">\n    <FilterLink\n      filter=\"SHOW_ALL\"\n      currentFilter={visibilityFilter}\n      onClick={onFilterClick}\n    >\n      <i className=\"fa fa-list-ul\"></i>\n    </FilterLink>\n    <FilterLink\n      filter=\"SHOW_ACTIVE\"\n      currentFilter={visibilityFilter}\n      onClick={onFilterClick}\n    >\n      <i className=\"fa fa-times\"></i>\n    </FilterLink>\n    <FilterLink\n      filter=\"SHOW_COMPLETED\"\n      currentFilter={visibilityFilter}\n      onClick={onFilterClick}\n    >\n      <i className=\"fa fa-check\"></i>\n    </FilterLink>\n  </div>\n);\n\nconst getVisibleTodos = (todos, filter) => {\n  switch (filter) {\n    case \"SHOW_ALL\":\n      return todos;\n    case \"SHOW_COMPLETED\":\n      return todos.filter(t => t.completed);\n    case \"SHOW_ACTIVE\":\n      return todos.filter(t => !t.completed);\n    default:\n      return todos;\n  }\n};\n","import uuid from \"uuid\";\n\nimport { ADD_TODO, TOGGLE_TODO } from \"./todoTypes\";\n\nexport const addTodo = (todo = \"\") => {\n  return {\n    type: ADD_TODO,\n    text: todo,\n    id: uuid.v4()\n  };\n};\n\nexport const toggleTodo = (id = \"\") => {\n  return {\n    type: TOGGLE_TODO,\n    id: id\n  };\n};\n","export const ADD_TODO = \"ADD_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\n","import { SET_VISIBILITY_FILTER } from \"./filterTypes\";\n\nexport const setVisibilityFilter = (filter = \"SHOW_ALL\") => {\n  return {\n    type: SET_VISIBILITY_FILTER,\n    filter\n  };\n};\n","export const SET_VISIBILITY_FILTER = \"SET_VISIBILITY_FILTER\";\n","import { TOGGLE_TODO, ADD_TODO } from \"./todoTypes\";\n\nconst initialState = [];\n\nconst todoReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return [\n        ...state,\n        {\n          id: action.id,\n          text: action.text,\n          completed: false\n        }\n      ];\n    case TOGGLE_TODO:\n      return state.map(todo => {\n        if (todo.id !== action.id) {\n          return todo;\n        }\n        return {\n          ...todo,\n          completed: !todo.completed\n        };\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default todoReducer;\n","import { combineReducers } from \"redux\";\nimport todoReducer from \"./todo/todoReducer\";\nimport filterReducer from \"./visibilityFilter/filterReducer\";\n\nconst rootReducer = combineReducers({\n  todos: todoReducer,\n  visibilityFilter: filterReducer\n});\n\nexport default rootReducer;\n","import { SET_VISIBILITY_FILTER } from \"./filterTypes\";\nconst initialState = \"SHOW_ALL\";\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_VISIBILITY_FILTER:\n      return action.filter;\n    default:\n      return state;\n  }\n};\n","import { createStore } from \"redux\";\n\nimport rootReducer from \"./rootReducer\";\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { Provider } from \"react-redux\";\nimport TodoContainer from \"./TodoContainer\";\nimport store from \"./redux/store\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <TodoContainer />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}